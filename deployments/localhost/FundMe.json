{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunders",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        }
    ],
    "transactionHash": "0xc1c97c6020a3d31d3c1c95ffa11e99885ad7f1ac26ffd63ef63475a8b9a9b6c6",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "971616",
        "logsBloom": "0x
        "blockHash": "0xabc1e91cccb8e63ca1e7ad4dc03777dbc58344db385735126bb6264e9eb037d4",
        "transactionHash": "0xc1c97c6020a3d31d3c1c95ffa11e99885ad7f1ac26ffd63ef63475a8b9a9b6c6",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "971616",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "0f916488b4842c8e9deed67d34a51d08",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"J. wndr\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for cornfunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function fund this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for cornfunding\\n * @author J. wndr\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type declarations\\n    using PriceConverter for uint256;\\n    // State variables\\n    // Minimum funding value in USD\\n    uint256 public constant MINIMUM_USD = 10 * 1e18; // 1 * 10 ** 18\\n    // Array of addresses that have sent funds to the contract\\n    address[] private s_funders;\\n    // Mapping of addresses to the amount of funds they have sent to the contract\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    // The address of the contract owner\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_pricefeed;\\n\\n    // Modifier that checks if the msg.sender is the contract owner\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    // Constructor sets the contract owner to the address that deployed the contract\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_pricefeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // What happen if someone send ETH to this contract without calling the fund() function\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /**\\n     * @notice This function fund this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        // Check if the value sent is greater than or equal to the MINIMUM_USD constant\\n        require(\\n            msg.value.getConversionRate(s_pricefeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough\\\"\\n        );\\n        // Add the sender's address to the funders array\\n        s_funders.push(msg.sender);\\n        // Add the amount sent to the addressToAmountFunded mapping\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    // Public function that can only be called by the contract owner\\n    function withdraw() public payable onlyOwner {\\n        // Iterate through the funders array\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            // Set the amount the funder has sent to 0 in the addressToAmountFunded mapping\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        // Empty the funders array\\n        s_funders = new address[](0);\\n\\n        // Try to transfer the remaining balance of the contract to the msg.sender\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n          for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            // Set the amount the funder has sent to 0 in the addressToAmountFunded mapping\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n          // Empty the funders array\\n        s_funders = new address[](0);\\n\\n        // Try to transfer the remaining balance of the contract to the msg.sender\\n        (bool success, ) = i_owner .call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns(address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n       function getPriceFeed() public view returns(AggregatorV3Interface) {\\n        return s_pricefeed;\\n    }\\n}\\n\",\"keccak256\":\"0xf3a42c7c9d606354240382c199b40e4dc0574e7e1f4a1f50e92b686bf06cabb2\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Library to convert ETH to USD\\nlibrary PriceConverter {\\n    // Retrieves the latest price of ETH in terms of USD from a specific price feed contract (AggregatorV3Interface)\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Address of the price feed contract\\n        // Retrieves the latest price data from the price feed contract\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // ETH in terms of USD\\n        //3000.00000000 8 Decimals\\n        return uint256(price * 1e10); // 1**10 == 10000000000\\n    }\\n\\n    // Converts input ETH amount to USD\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Retrieves the current ETH price in USD\\n        uint256 ethPrice = getPrice(priceFeed);\\n        // Calculates the equivalent USD value of the input ETH amount\\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x93932f1f29bc77c71eb5fe50748f8316371f07f79cb0d6ddf14f2b0587b25428\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011b9380380620011b9833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611033620001866000396000818161022b01528181610443015281816105bb01526107b101526110336000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012f5780639e87a5cd1461015a578063b60d428814610185578063be2693f01461018f5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610104575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a2d565b610199565b6040516100b49190610a73565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610aba565b6101e2565b6040516100f19190610af6565b60405180910390f35b610102610229565b005b34801561011057600080fd5b50610119610433565b6040516101269190610a73565b60405180910390f35b34801561013b57600080fd5b5061014461043f565b6040516101519190610af6565b60405180910390f35b34801561016657600080fd5b5061016f610467565b60405161017c9190610b70565b60405180910390f35b61018d610491565b005b6101976105b9565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082815481106101f7576101f6610b8b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ae576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103595760008082815481106102d3576102d2610b8b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035190610be9565b9150506102b1565b50600067ffffffffffffffff81111561037557610374610c32565b5b6040519080825280602002602001820160405280156103a35781602001602082028036833780820191505090505b50600090805190602001906103b9929190610923565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103e090610c92565b60006040518083038185875af1925050503d806000811461041d576040519150601f19603f3d011682016040523d82523d6000602084013e610422565b606091505b505090508061043057600080fd5b50565b678ac7230489e8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b678ac7230489e800006104cf600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461084790919063ffffffff16565b1015610510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050790610d04565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106c157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610677575b5050505050905060005b815181101561074c5760008282815181106106e9576106e8610b8b565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074490610be9565b9150506106cb565b50600067ffffffffffffffff81111561076857610767610c32565b5b6040519080825280602002602001820160405280156107965781602001602082028036833780820191505090505b50600090805190602001906107ac929190610923565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f390610c92565b60006040518083038185875af1925050503d8060008114610830576040519150601f19603f3d011682016040523d82523d6000602084013e610835565b606091505b505090508061084357600080fd5b5050565b60008061085383610883565b90506000670de0b6b3a7640000828661086c9190610d24565b6108769190610dad565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109049190610e6b565b5050509150506402540be4008161091b9190610ee6565b915050919050565b82805482825590600052602060002090810192821561099c579160200282015b8281111561099b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610943565b5b5090506109a991906109ad565b5090565b5b808211156109c65760008160009055506001016109ae565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109fa826109cf565b9050919050565b610a0a816109ef565b8114610a1557600080fd5b50565b600081359050610a2781610a01565b92915050565b600060208284031215610a4357610a426109ca565b5b6000610a5184828501610a18565b91505092915050565b6000819050919050565b610a6d81610a5a565b82525050565b6000602082019050610a886000830184610a64565b92915050565b610a9781610a5a565b8114610aa257600080fd5b50565b600081359050610ab481610a8e565b92915050565b600060208284031215610ad057610acf6109ca565b5b6000610ade84828501610aa5565b91505092915050565b610af0816109ef565b82525050565b6000602082019050610b0b6000830184610ae7565b92915050565b6000819050919050565b6000610b36610b31610b2c846109cf565b610b11565b6109cf565b9050919050565b6000610b4882610b1b565b9050919050565b6000610b5a82610b3d565b9050919050565b610b6a81610b4f565b82525050565b6000602082019050610b856000830184610b61565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bf482610a5a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c2757610c26610bba565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c7c600083610c61565b9150610c8782610c6c565b600082019050919050565b6000610c9d82610c6f565b9150819050919050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610cee601283610ca7565b9150610cf982610cb8565b602082019050919050565b60006020820190508181036000830152610d1d81610ce1565b9050919050565b6000610d2f82610a5a565b9150610d3a83610a5a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d7357610d72610bba565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610db882610a5a565b9150610dc383610a5a565b925082610dd357610dd2610d7e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610dfd81610dde565b8114610e0857600080fd5b50565b600081519050610e1a81610df4565b92915050565b6000819050919050565b610e3381610e20565b8114610e3e57600080fd5b50565b600081519050610e5081610e2a565b92915050565b600081519050610e6581610a8e565b92915050565b600080600080600060a08688031215610e8757610e866109ca565b5b6000610e9588828901610e0b565b9550506020610ea688828901610e41565b9450506040610eb788828901610e56565b9350506060610ec888828901610e56565b9250506080610ed988828901610e0b565b9150509295509295909350565b6000610ef182610e20565b9150610efc83610e20565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f3b57610f3a610bba565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f7857610f77610bba565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fb557610fb4610bba565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610ff257610ff1610bba565b5b82820290509291505056fea264697066735822122012918e9be8f762591d4641952e3adc8a999470eab53187ad8ccefecebde79d1364736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012f5780639e87a5cd1461015a578063b60d428814610185578063be2693f01461018f5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610104575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a2d565b610199565b6040516100b49190610a73565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610aba565b6101e2565b6040516100f19190610af6565b60405180910390f35b610102610229565b005b34801561011057600080fd5b50610119610433565b6040516101269190610a73565b60405180910390f35b34801561013b57600080fd5b5061014461043f565b6040516101519190610af6565b60405180910390f35b34801561016657600080fd5b5061016f610467565b60405161017c9190610b70565b60405180910390f35b61018d610491565b005b6101976105b9565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008082815481106101f7576101f6610b8b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102ae576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156103595760008082815481106102d3576102d2610b8b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035190610be9565b9150506102b1565b50600067ffffffffffffffff81111561037557610374610c32565b5b6040519080825280602002602001820160405280156103a35781602001602082028036833780820191505090505b50600090805190602001906103b9929190610923565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103e090610c92565b60006040518083038185875af1925050503d806000811461041d576040519150601f19603f3d011682016040523d82523d6000602084013e610422565b606091505b505090508061043057600080fd5b50565b678ac7230489e8000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b678ac7230489e800006104cf600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461084790919063ffffffff16565b1015610510576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050790610d04565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106c157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610677575b5050505050905060005b815181101561074c5760008282815181106106e9576106e8610b8b565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074490610be9565b9150506106cb565b50600067ffffffffffffffff81111561076857610767610c32565b5b6040519080825280602002602001820160405280156107965781602001602082028036833780820191505090505b50600090805190602001906107ac929190610923565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107f390610c92565b60006040518083038185875af1925050503d8060008114610830576040519150601f19603f3d011682016040523d82523d6000602084013e610835565b606091505b505090508061084357600080fd5b5050565b60008061085383610883565b90506000670de0b6b3a7640000828661086c9190610d24565b6108769190610dad565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108cc57600080fd5b505afa1580156108e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109049190610e6b565b5050509150506402540be4008161091b9190610ee6565b915050919050565b82805482825590600052602060002090810192821561099c579160200282015b8281111561099b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610943565b5b5090506109a991906109ad565b5090565b5b808211156109c65760008160009055506001016109ae565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109fa826109cf565b9050919050565b610a0a816109ef565b8114610a1557600080fd5b50565b600081359050610a2781610a01565b92915050565b600060208284031215610a4357610a426109ca565b5b6000610a5184828501610a18565b91505092915050565b6000819050919050565b610a6d81610a5a565b82525050565b6000602082019050610a886000830184610a64565b92915050565b610a9781610a5a565b8114610aa257600080fd5b50565b600081359050610ab481610a8e565b92915050565b600060208284031215610ad057610acf6109ca565b5b6000610ade84828501610aa5565b91505092915050565b610af0816109ef565b82525050565b6000602082019050610b0b6000830184610ae7565b92915050565b6000819050919050565b6000610b36610b31610b2c846109cf565b610b11565b6109cf565b9050919050565b6000610b4882610b1b565b9050919050565b6000610b5a82610b3d565b9050919050565b610b6a81610b4f565b82525050565b6000602082019050610b856000830184610b61565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bf482610a5a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c2757610c26610bba565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c7c600083610c61565b9150610c8782610c6c565b600082019050919050565b6000610c9d82610c6f565b9150819050919050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610cee601283610ca7565b9150610cf982610cb8565b602082019050919050565b60006020820190508181036000830152610d1d81610ce1565b9050919050565b6000610d2f82610a5a565b9150610d3a83610a5a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d7357610d72610bba565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610db882610a5a565b9150610dc383610a5a565b925082610dd357610dd2610d7e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610dfd81610dde565b8114610e0857600080fd5b50565b600081519050610e1a81610df4565b92915050565b6000819050919050565b610e3381610e20565b8114610e3e57600080fd5b50565b600081519050610e5081610e2a565b92915050565b600081519050610e6581610a8e565b92915050565b600080600080600060a08688031215610e8757610e866109ca565b5b6000610e9588828901610e0b565b9550506020610ea688828901610e41565b9450506040610eb788828901610e56565b9350506060610ec888828901610e56565b9250506080610ed988828901610e0b565b9150509295509295909350565b6000610ef182610e20565b9150610efc83610e20565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f3b57610f3a610bba565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f7857610f77610bba565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fb557610fb4610bba565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610ff257610ff1610bba565b5b82820290509291505056fea264697066735822122012918e9be8f762591d4641952e3adc8a999470eab53187ad8ccefecebde79d1364736f6c63430008080033",
    "devdoc": {
        "author": "J. wndr",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements price feeds as our library"
            }
        },
        "title": "A contract for cornfunding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function fund this contract"
            }
        },
        "notice": "This contract is to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 66,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 71,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_pricefeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
